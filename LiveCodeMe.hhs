{
  "version": "0.2.1.0",
  "cells": [
    {
      "cell_type": "text",
      "source": "How to play sound in Haskell?\n\nConnect to a MIDI output device (e.g. Fluidsynth).\n"
    },
    {
      "cell_type": "code",
      "source": "s <- openMidi\naddFinalizerSession $ closeMidi >>= print\nshow s"
    },
    {
      "cell_type": "text",
      "source": "Create an ensemble and players.\n"
    },
    {
      "cell_type": "code",
      "source": "ensemble <- newEnsemble s\ndrums    <- newPlayer 10\nbass     <- newPlayer 1\npad      <- newPlayer 2\nkeys     <- newPlayer 3\nsetTempoBpm ensemble 110\ntogether ensemble [drums, bass, pad, keys]\naddFinalizerSession $ dissolve ensemble"
    },
    {
      "cell_type": "code",
      "source": "setTempoBpm ensemble 110"
    },
    {
      "cell_type": "text",
      "source": "Drums\n"
    },
    {
      "cell_type": "code",
      "source": "play drums $ hasten 4 $ fromList [bd,sn,bd,sn]\n[bd, sn, chh, ohh]"
    },
    {
      "cell_type": "code",
      "source": "let pat1 = hasten 16 $ beat \"x,x, ,,X, ,,x, x,,x\"\nlet pat2 = hasten  8 $ beat \",,x, ,,x,\"\nlet pat3 = hasten  8 $ beat \",X,x ,X,x\"\nplay drums $\n        (with bd <$> pat1)\n    <|> (with sn <$> pat2)\n    <|> (with hh <$> pat3)"
    },
    {
      "cell_type": "code",
      "source": "play drums $ silence"
    },
    {
      "cell_type": "text",
      "source": "Bass\n"
    },
    {
      "cell_type": "code",
      "source": "play bass $\n   (fromList $ pitches \"a2 F2 c2 G2\") <*\n   (hasten 16 $ beat $ concat $ replicate (4*8) $ \"x.\")"
    },
    {
      "cell_type": "code",
      "source": "play bass $ silence"
    },
    {
      "cell_type": "text",
      "source": "Pad\n"
    },
    {
      "cell_type": "code",
      "source": "play pad $ polyphony $ slow 2 $ fromList $ chords \"am G\""
    },
    {
      "cell_type": "code",
      "source": "play pad $ polyphony $ fromList $ voicelead $ chords \"am F C G\""
    },
    {
      "cell_type": "code",
      "source": "play pad $ silence"
    },
    {
      "cell_type": "text",
      "source": "Rhythm instrument\n"
    },
    {
      "cell_type": "code",
      "source": "let mychords = polyphony $ fromList $ chords \"am F C G\"\nlet rhythm   = mconcat   $ replicate 4 campfire\nlet pattern1 = mychords <* rhythm\nplay keys $ pattern1"
    },
    {
      "cell_type": "code",
      "source": "let pattern1 = (fromList $ chords \"am F C G\") `bind` (<$ campfire)\nplay keys $ polyphony $ pattern1"
    },
    {
      "cell_type": "code",
      "source": "play keys $ polyphony $ fromList $ chords \"am F C G\""
    },
    {
      "cell_type": "code",
      "source": "let arpeggio xs = hasten 32 $ fromList $ concat $ replicate 16 $ xs ++ tail (reverse xs)\nplay keys $ (fromList $ chords \"am F C G\") `bind` arpeggio"
    },
    {
      "cell_type": "text",
      "source": "Melody\n"
    },
    {
      "cell_type": "code",
      "source": "let q1 = map (+2*12) $ pitches \"c5 g e d c5 g a\"\nlet q2 = map (+1*12) $ pitches \"c5 d a d a b e\"\nplay keys $ hasten 4 $ fromList q1 <|> fromList q2"
    },
    {
      "cell_type": "code",
      "source": "play keys $ silence"
    },
    {
      "cell_type": "text",
      "source": "Exit everything.\n"
    },
    {
      "cell_type": "code",
      "source": "dissolve ensemble"
    },
    {
      "cell_type": "code",
      "source": "show `fmap` closeMidi"
    }
  ],
  "extensions": "OverloadedStrings",
  "importModules": "import Cnoidal\nimport Control.Applicative\nimport qualified Data.Map",
  "loadFiles": "src/Cnoidal.hs",
  "settings": {
    "packageTool": "stack",
    "packagePath": "../hyper-haskell/haskell/stack.yaml",
    "searchPath": "src"
  }
}